#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CargoInfo")]
	public partial class DBDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAclRecord(AclRecord instance);
    partial void UpdateAclRecord(AclRecord instance);
    partial void DeleteAclRecord(AclRecord instance);
    partial void InsertStateProvince(StateProvince instance);
    partial void UpdateStateProvince(StateProvince instance);
    partial void DeleteStateProvince(StateProvince instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCounty(County instance);
    partial void UpdateCounty(County instance);
    partial void DeleteCounty(County instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustomer_CustomerRole_Mapping(Customer_CustomerRole_Mapping instance);
    partial void UpdateCustomer_CustomerRole_Mapping(Customer_CustomerRole_Mapping instance);
    partial void DeleteCustomer_CustomerRole_Mapping(Customer_CustomerRole_Mapping instance);
    partial void InsertCustomerAddress(CustomerAddress instance);
    partial void UpdateCustomerAddress(CustomerAddress instance);
    partial void DeleteCustomerAddress(CustomerAddress instance);
    partial void InsertCustomerRole(CustomerRole instance);
    partial void UpdateCustomerRole(CustomerRole instance);
    partial void DeleteCustomerRole(CustomerRole instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertPermissionRecord(PermissionRecord instance);
    partial void UpdatePermissionRecord(PermissionRecord instance);
    partial void DeletePermissionRecord(PermissionRecord instance);
    partial void InsertPermissionRecord_Role_Mapping(PermissionRecord_Role_Mapping instance);
    partial void UpdatePermissionRecord_Role_Mapping(PermissionRecord_Role_Mapping instance);
    partial void DeletePermissionRecord_Role_Mapping(PermissionRecord_Role_Mapping instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    #endregion
		
		public DBDataClassesDataContext() : 
				base(global::Web.Data.Properties.Settings.Default.CargoInfoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AclRecord> AclRecords
		{
			get
			{
				return this.GetTable<AclRecord>();
			}
		}
		
		public System.Data.Linq.Table<StateProvince> StateProvinces
		{
			get
			{
				return this.GetTable<StateProvince>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<County> Counties
		{
			get
			{
				return this.GetTable<County>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Customer_CustomerRole_Mapping> Customer_CustomerRole_Mappings
		{
			get
			{
				return this.GetTable<Customer_CustomerRole_Mapping>();
			}
		}
		
		public System.Data.Linq.Table<CustomerAddress> CustomerAddresses
		{
			get
			{
				return this.GetTable<CustomerAddress>();
			}
		}
		
		public System.Data.Linq.Table<CustomerRole> CustomerRoles
		{
			get
			{
				return this.GetTable<CustomerRole>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<PermissionRecord> PermissionRecords
		{
			get
			{
				return this.GetTable<PermissionRecord>();
			}
		}
		
		public System.Data.Linq.Table<PermissionRecord_Role_Mapping> PermissionRecord_Role_Mappings
		{
			get
			{
				return this.GetTable<PermissionRecord_Role_Mapping>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AclRecord")]
	public partial class AclRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EntityId;
		
		private string _EntityName;
		
		private int _CustomerRoleId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEntityIdChanging(int value);
    partial void OnEntityIdChanged();
    partial void OnEntityNameChanging(string value);
    partial void OnEntityNameChanged();
    partial void OnCustomerRoleIdChanging(int value);
    partial void OnCustomerRoleIdChanged();
    #endregion
		
		public AclRecord()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="Int NOT NULL")]
		public int EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string EntityName
		{
			get
			{
				return this._EntityName;
			}
			set
			{
				if ((this._EntityName != value))
				{
					this.OnEntityNameChanging(value);
					this.SendPropertyChanging();
					this._EntityName = value;
					this.SendPropertyChanged("EntityName");
					this.OnEntityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerRoleId", DbType="Int NOT NULL")]
		public int CustomerRoleId
		{
			get
			{
				return this._CustomerRoleId;
			}
			set
			{
				if ((this._CustomerRoleId != value))
				{
					this.OnCustomerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerRoleId = value;
					this.SendPropertyChanged("CustomerRoleId");
					this.OnCustomerRoleIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateProvince")]
	public partial class StateProvince : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CountryId;
		
		private string _Name;
		
		private string _Abbreviation;
		
		private bool _Published;
		
		private int _DisplayOrder;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<City> _Cities;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnPublishedChanging(bool value);
    partial void OnPublishedChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    #endregion
		
		public StateProvince()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="NVarChar(100)")]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="Bit NOT NULL")]
		public bool Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateProvince_Address", Storage="_Addresses", ThisKey="Id", OtherKey="StateProvinceId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateProvince_City", Storage="_Cities", ThisKey="Id", OtherKey="StateProvinceId")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_StateProvince", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.StateProvinces.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.StateProvinces.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.StateProvince = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.StateProvince = null;
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.StateProvince = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.StateProvince = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Company;
		
		private System.Nullable<int> _CountryId;
		
		private System.Nullable<int> _StateProvinceId;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _CountyId;
		
		private string _ZipPostalCode;
		
		private string _PhoneNumber;
		
		private string _FaxNumber;
		
		private System.DateTime _CreatedOnUtc;
		
		private EntitySet<CustomerAddress> _CustomerAddresses;
		
		private EntityRef<StateProvince> _StateProvince;
		
		private EntityRef<City> _City;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<County> _County;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    partial void OnStateProvinceIdChanging(System.Nullable<int> value);
    partial void OnStateProvinceIdChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnCountyIdChanging(System.Nullable<int> value);
    partial void OnCountyIdChanged();
    partial void OnZipPostalCodeChanging(string value);
    partial void OnZipPostalCodeChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnFaxNumberChanging(string value);
    partial void OnFaxNumberChanged();
    partial void OnCreatedOnUtcChanging(System.DateTime value);
    partial void OnCreatedOnUtcChanged();
    #endregion
		
		public Address()
		{
			this._CustomerAddresses = new EntitySet<CustomerAddress>(new Action<CustomerAddress>(this.attach_CustomerAddresses), new Action<CustomerAddress>(this.detach_CustomerAddresses));
			this._StateProvince = default(EntityRef<StateProvince>);
			this._City = default(EntityRef<City>);
			this._Country = default(EntityRef<Country>);
			this._County = default(EntityRef<County>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NVarChar(MAX)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateProvinceId", DbType="Int")]
		public System.Nullable<int> StateProvinceId
		{
			get
			{
				return this._StateProvinceId;
			}
			set
			{
				if ((this._StateProvinceId != value))
				{
					if (this._StateProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._StateProvinceId = value;
					this.SendPropertyChanged("StateProvinceId");
					this.OnStateProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyId", DbType="Int")]
		public System.Nullable<int> CountyId
		{
			get
			{
				return this._CountyId;
			}
			set
			{
				if ((this._CountyId != value))
				{
					if (this._County.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountyIdChanging(value);
					this.SendPropertyChanging();
					this._CountyId = value;
					this.SendPropertyChanged("CountyId");
					this.OnCountyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipPostalCode", DbType="NVarChar(MAX)")]
		public string ZipPostalCode
		{
			get
			{
				return this._ZipPostalCode;
			}
			set
			{
				if ((this._ZipPostalCode != value))
				{
					this.OnZipPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipPostalCode = value;
					this.SendPropertyChanged("ZipPostalCode");
					this.OnZipPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxNumber", DbType="NVarChar(MAX)")]
		public string FaxNumber
		{
			get
			{
				return this._FaxNumber;
			}
			set
			{
				if ((this._FaxNumber != value))
				{
					this.OnFaxNumberChanging(value);
					this.SendPropertyChanging();
					this._FaxNumber = value;
					this.SendPropertyChanged("FaxNumber");
					this.OnFaxNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOnUtc", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOnUtc
		{
			get
			{
				return this._CreatedOnUtc;
			}
			set
			{
				if ((this._CreatedOnUtc != value))
				{
					this.OnCreatedOnUtcChanging(value);
					this.SendPropertyChanging();
					this._CreatedOnUtc = value;
					this.SendPropertyChanged("CreatedOnUtc");
					this.OnCreatedOnUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_CustomerAddress", Storage="_CustomerAddresses", ThisKey="Id", OtherKey="Address_Id")]
		public EntitySet<CustomerAddress> CustomerAddresses
		{
			get
			{
				return this._CustomerAddresses;
			}
			set
			{
				this._CustomerAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateProvince_Address", Storage="_StateProvince", ThisKey="StateProvinceId", OtherKey="Id", IsForeignKey=true)]
		public StateProvince StateProvince
		{
			get
			{
				return this._StateProvince.Entity;
			}
			set
			{
				StateProvince previousValue = this._StateProvince.Entity;
				if (((previousValue != value) 
							|| (this._StateProvince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StateProvince.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._StateProvince.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._StateProvinceId = value.Id;
					}
					else
					{
						this._StateProvinceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("StateProvince");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Address", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Address", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Address", Storage="_County", ThisKey="CountyId", OtherKey="Id", IsForeignKey=true)]
		public County County
		{
			get
			{
				return this._County.Entity;
			}
			set
			{
				County previousValue = this._County.Entity;
				if (((previousValue != value) 
							|| (this._County.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._County.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._County.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CountyId = value.Id;
					}
					else
					{
						this._CountyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("County");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerAddresses(CustomerAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_CustomerAddresses(CustomerAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StateProvinceId;
		
		private string _Name;
		
		private string _Abbreviation;
		
		private bool _Published;
		
		private int _DisplayOrder;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<County> _Counties;
		
		private EntityRef<StateProvince> _StateProvince;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStateProvinceIdChanging(int value);
    partial void OnStateProvinceIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnPublishedChanging(bool value);
    partial void OnPublishedChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    #endregion
		
		public City()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Counties = new EntitySet<County>(new Action<County>(this.attach_Counties), new Action<County>(this.detach_Counties));
			this._StateProvince = default(EntityRef<StateProvince>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateProvinceId", DbType="Int NOT NULL")]
		public int StateProvinceId
		{
			get
			{
				return this._StateProvinceId;
			}
			set
			{
				if ((this._StateProvinceId != value))
				{
					if (this._StateProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._StateProvinceId = value;
					this.SendPropertyChanged("StateProvinceId");
					this.OnStateProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="NVarChar(100)")]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="Bit NOT NULL")]
		public bool Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Address", Storage="_Addresses", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_County", Storage="_Counties", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<County> Counties
		{
			get
			{
				return this._Counties;
			}
			set
			{
				this._Counties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateProvince_City", Storage="_StateProvince", ThisKey="StateProvinceId", OtherKey="Id", IsForeignKey=true)]
		public StateProvince StateProvince
		{
			get
			{
				return this._StateProvince.Entity;
			}
			set
			{
				StateProvince previousValue = this._StateProvince.Entity;
				if (((previousValue != value) 
							|| (this._StateProvince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StateProvince.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._StateProvince.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._StateProvinceId = value.Id;
					}
					else
					{
						this._StateProvinceId = default(int);
					}
					this.SendPropertyChanged("StateProvince");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Counties(County entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Counties(County entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _AllowsBilling;
		
		private bool _AllowsShipping;
		
		private string _TwoLetterIsoCode;
		
		private string _ThreeLetterIsoCode;
		
		private int _NumericIsoCode;
		
		private bool _SubjectToVat;
		
		private bool _Published;
		
		private int _DisplayOrder;
		
		private EntitySet<StateProvince> _StateProvinces;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAllowsBillingChanging(bool value);
    partial void OnAllowsBillingChanged();
    partial void OnAllowsShippingChanging(bool value);
    partial void OnAllowsShippingChanged();
    partial void OnTwoLetterIsoCodeChanging(string value);
    partial void OnTwoLetterIsoCodeChanged();
    partial void OnThreeLetterIsoCodeChanging(string value);
    partial void OnThreeLetterIsoCodeChanged();
    partial void OnNumericIsoCodeChanging(int value);
    partial void OnNumericIsoCodeChanged();
    partial void OnSubjectToVatChanging(bool value);
    partial void OnSubjectToVatChanged();
    partial void OnPublishedChanging(bool value);
    partial void OnPublishedChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    #endregion
		
		public Country()
		{
			this._StateProvinces = new EntitySet<StateProvince>(new Action<StateProvince>(this.attach_StateProvinces), new Action<StateProvince>(this.detach_StateProvinces));
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowsBilling", DbType="Bit NOT NULL")]
		public bool AllowsBilling
		{
			get
			{
				return this._AllowsBilling;
			}
			set
			{
				if ((this._AllowsBilling != value))
				{
					this.OnAllowsBillingChanging(value);
					this.SendPropertyChanging();
					this._AllowsBilling = value;
					this.SendPropertyChanged("AllowsBilling");
					this.OnAllowsBillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowsShipping", DbType="Bit NOT NULL")]
		public bool AllowsShipping
		{
			get
			{
				return this._AllowsShipping;
			}
			set
			{
				if ((this._AllowsShipping != value))
				{
					this.OnAllowsShippingChanging(value);
					this.SendPropertyChanging();
					this._AllowsShipping = value;
					this.SendPropertyChanged("AllowsShipping");
					this.OnAllowsShippingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoLetterIsoCode", DbType="NVarChar(2)")]
		public string TwoLetterIsoCode
		{
			get
			{
				return this._TwoLetterIsoCode;
			}
			set
			{
				if ((this._TwoLetterIsoCode != value))
				{
					this.OnTwoLetterIsoCodeChanging(value);
					this.SendPropertyChanging();
					this._TwoLetterIsoCode = value;
					this.SendPropertyChanged("TwoLetterIsoCode");
					this.OnTwoLetterIsoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreeLetterIsoCode", DbType="NVarChar(3)")]
		public string ThreeLetterIsoCode
		{
			get
			{
				return this._ThreeLetterIsoCode;
			}
			set
			{
				if ((this._ThreeLetterIsoCode != value))
				{
					this.OnThreeLetterIsoCodeChanging(value);
					this.SendPropertyChanging();
					this._ThreeLetterIsoCode = value;
					this.SendPropertyChanged("ThreeLetterIsoCode");
					this.OnThreeLetterIsoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumericIsoCode", DbType="Int NOT NULL")]
		public int NumericIsoCode
		{
			get
			{
				return this._NumericIsoCode;
			}
			set
			{
				if ((this._NumericIsoCode != value))
				{
					this.OnNumericIsoCodeChanging(value);
					this.SendPropertyChanging();
					this._NumericIsoCode = value;
					this.SendPropertyChanged("NumericIsoCode");
					this.OnNumericIsoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectToVat", DbType="Bit NOT NULL")]
		public bool SubjectToVat
		{
			get
			{
				return this._SubjectToVat;
			}
			set
			{
				if ((this._SubjectToVat != value))
				{
					this.OnSubjectToVatChanging(value);
					this.SendPropertyChanging();
					this._SubjectToVat = value;
					this.SendPropertyChanged("SubjectToVat");
					this.OnSubjectToVatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="Bit NOT NULL")]
		public bool Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_StateProvince", Storage="_StateProvinces", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<StateProvince> StateProvinces
		{
			get
			{
				return this._StateProvinces;
			}
			set
			{
				this._StateProvinces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Address", Storage="_Addresses", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StateProvinces(StateProvince entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_StateProvinces(StateProvince entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.County")]
	public partial class County : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CityId;
		
		private string _Name;
		
		private string _Abbreviation;
		
		private bool _Published;
		
		private int _DisplayOrder;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnPublishedChanging(bool value);
    partial void OnPublishedChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    #endregion
		
		public County()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="NVarChar(100)")]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="Bit NOT NULL")]
		public bool Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Address", Storage="_Addresses", ThisKey="Id", OtherKey="CountyId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_County", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Counties.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Counties.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.County = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.County = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _CustomerGuid;
		
		private string _Username;
		
		private string _Email;
		
		private string _Password;
		
		private int _PasswordFormatId;
		
		private string _PasswordSalt;
		
		private string _AdminComment;
		
		private bool _IsTaxExempt;
		
		private int _AffiliateId;
		
		private int _VendorId;
		
		private bool _Active;
		
		private bool _Deleted;
		
		private bool _IsSystemAccount;
		
		private string _SystemName;
		
		private string _LastIpAddress;
		
		private System.DateTime _CreatedOnUtc;
		
		private System.Nullable<System.DateTime> _LastLoginDateUtc;
		
		private System.DateTime _LastActivityDateUtc;
		
		private EntitySet<Customer_CustomerRole_Mapping> _Customer_CustomerRole_Mappings;
		
		private EntitySet<CustomerAddress> _CustomerAddresses;
		
		private EntitySet<Log> _Logs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerGuidChanging(System.Guid value);
    partial void OnCustomerGuidChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatIdChanging(int value);
    partial void OnPasswordFormatIdChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnAdminCommentChanging(string value);
    partial void OnAdminCommentChanged();
    partial void OnIsTaxExemptChanging(bool value);
    partial void OnIsTaxExemptChanged();
    partial void OnAffiliateIdChanging(int value);
    partial void OnAffiliateIdChanged();
    partial void OnVendorIdChanging(int value);
    partial void OnVendorIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnIsSystemAccountChanging(bool value);
    partial void OnIsSystemAccountChanged();
    partial void OnSystemNameChanging(string value);
    partial void OnSystemNameChanged();
    partial void OnLastIpAddressChanging(string value);
    partial void OnLastIpAddressChanged();
    partial void OnCreatedOnUtcChanging(System.DateTime value);
    partial void OnCreatedOnUtcChanged();
    partial void OnLastLoginDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateUtcChanged();
    partial void OnLastActivityDateUtcChanging(System.DateTime value);
    partial void OnLastActivityDateUtcChanged();
    #endregion
		
		public Customer()
		{
			this._Customer_CustomerRole_Mappings = new EntitySet<Customer_CustomerRole_Mapping>(new Action<Customer_CustomerRole_Mapping>(this.attach_Customer_CustomerRole_Mappings), new Action<Customer_CustomerRole_Mapping>(this.detach_Customer_CustomerRole_Mappings));
			this._CustomerAddresses = new EntitySet<CustomerAddress>(new Action<CustomerAddress>(this.attach_CustomerAddresses), new Action<CustomerAddress>(this.detach_CustomerAddresses));
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerGuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CustomerGuid
		{
			get
			{
				return this._CustomerGuid;
			}
			set
			{
				if ((this._CustomerGuid != value))
				{
					this.OnCustomerGuidChanging(value);
					this.SendPropertyChanging();
					this._CustomerGuid = value;
					this.SendPropertyChanged("CustomerGuid");
					this.OnCustomerGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(1000)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(1000)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormatId", DbType="Int NOT NULL")]
		public int PasswordFormatId
		{
			get
			{
				return this._PasswordFormatId;
			}
			set
			{
				if ((this._PasswordFormatId != value))
				{
					this.OnPasswordFormatIdChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormatId = value;
					this.SendPropertyChanged("PasswordFormatId");
					this.OnPasswordFormatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(MAX)")]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminComment", DbType="NVarChar(MAX)")]
		public string AdminComment
		{
			get
			{
				return this._AdminComment;
			}
			set
			{
				if ((this._AdminComment != value))
				{
					this.OnAdminCommentChanging(value);
					this.SendPropertyChanging();
					this._AdminComment = value;
					this.SendPropertyChanged("AdminComment");
					this.OnAdminCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTaxExempt", DbType="Bit NOT NULL")]
		public bool IsTaxExempt
		{
			get
			{
				return this._IsTaxExempt;
			}
			set
			{
				if ((this._IsTaxExempt != value))
				{
					this.OnIsTaxExemptChanging(value);
					this.SendPropertyChanging();
					this._IsTaxExempt = value;
					this.SendPropertyChanged("IsTaxExempt");
					this.OnIsTaxExemptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffiliateId", DbType="Int NOT NULL")]
		public int AffiliateId
		{
			get
			{
				return this._AffiliateId;
			}
			set
			{
				if ((this._AffiliateId != value))
				{
					this.OnAffiliateIdChanging(value);
					this.SendPropertyChanging();
					this._AffiliateId = value;
					this.SendPropertyChanged("AffiliateId");
					this.OnAffiliateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorId", DbType="Int NOT NULL")]
		public int VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemAccount", DbType="Bit NOT NULL")]
		public bool IsSystemAccount
		{
			get
			{
				return this._IsSystemAccount;
			}
			set
			{
				if ((this._IsSystemAccount != value))
				{
					this.OnIsSystemAccountChanging(value);
					this.SendPropertyChanging();
					this._IsSystemAccount = value;
					this.SendPropertyChanged("IsSystemAccount");
					this.OnIsSystemAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemName", DbType="NVarChar(MAX)")]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastIpAddress", DbType="NVarChar(MAX)")]
		public string LastIpAddress
		{
			get
			{
				return this._LastIpAddress;
			}
			set
			{
				if ((this._LastIpAddress != value))
				{
					this.OnLastIpAddressChanging(value);
					this.SendPropertyChanging();
					this._LastIpAddress = value;
					this.SendPropertyChanged("LastIpAddress");
					this.OnLastIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOnUtc", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOnUtc
		{
			get
			{
				return this._CreatedOnUtc;
			}
			set
			{
				if ((this._CreatedOnUtc != value))
				{
					this.OnCreatedOnUtcChanging(value);
					this.SendPropertyChanging();
					this._CreatedOnUtc = value;
					this.SendPropertyChanged("CreatedOnUtc");
					this.OnCreatedOnUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginDateUtc
		{
			get
			{
				return this._LastLoginDateUtc;
			}
			set
			{
				if ((this._LastLoginDateUtc != value))
				{
					this.OnLastLoginDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDateUtc = value;
					this.SendPropertyChanged("LastLoginDateUtc");
					this.OnLastLoginDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDateUtc", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDateUtc
		{
			get
			{
				return this._LastActivityDateUtc;
			}
			set
			{
				if ((this._LastActivityDateUtc != value))
				{
					this.OnLastActivityDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDateUtc = value;
					this.SendPropertyChanged("LastActivityDateUtc");
					this.OnLastActivityDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Customer_CustomerRole_Mapping", Storage="_Customer_CustomerRole_Mappings", ThisKey="Id", OtherKey="Customer_Id")]
		public EntitySet<Customer_CustomerRole_Mapping> Customer_CustomerRole_Mappings
		{
			get
			{
				return this._Customer_CustomerRole_Mappings;
			}
			set
			{
				this._Customer_CustomerRole_Mappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerAddress", Storage="_CustomerAddresses", ThisKey="Id", OtherKey="Customer_Id")]
		public EntitySet<CustomerAddress> CustomerAddresses
		{
			get
			{
				return this._CustomerAddresses;
			}
			set
			{
				this._CustomerAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Log", Storage="_Logs", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customer_CustomerRole_Mappings(Customer_CustomerRole_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Customer_CustomerRole_Mappings(Customer_CustomerRole_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerAddresses(CustomerAddress entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerAddresses(CustomerAddress entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer_CustomerRole_Mapping")]
	public partial class Customer_CustomerRole_Mapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Customer_Id;
		
		private int _CustomerRole_Id;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<CustomerRole> _CustomerRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IdChanging(int value);
    partial void OnCustomer_IdChanged();
    partial void OnCustomerRole_IdChanging(int value);
    partial void OnCustomerRole_IdChanged();
    #endregion
		
		public Customer_CustomerRole_Mapping()
		{
			this._Customer = default(EntityRef<Customer>);
			this._CustomerRole = default(EntityRef<CustomerRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Customer_Id
		{
			get
			{
				return this._Customer_Id;
			}
			set
			{
				if ((this._Customer_Id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IdChanging(value);
					this.SendPropertyChanging();
					this._Customer_Id = value;
					this.SendPropertyChanged("Customer_Id");
					this.OnCustomer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerRole_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerRole_Id
		{
			get
			{
				return this._CustomerRole_Id;
			}
			set
			{
				if ((this._CustomerRole_Id != value))
				{
					if (this._CustomerRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerRole_IdChanging(value);
					this.SendPropertyChanging();
					this._CustomerRole_Id = value;
					this.SendPropertyChanged("CustomerRole_Id");
					this.OnCustomerRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Customer_CustomerRole_Mapping", Storage="_Customer", ThisKey="Customer_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Customer_CustomerRole_Mappings.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Customer_CustomerRole_Mappings.Add(this);
						this._Customer_Id = value.Id;
					}
					else
					{
						this._Customer_Id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerRole_Customer_CustomerRole_Mapping", Storage="_CustomerRole", ThisKey="CustomerRole_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CustomerRole CustomerRole
		{
			get
			{
				return this._CustomerRole.Entity;
			}
			set
			{
				CustomerRole previousValue = this._CustomerRole.Entity;
				if (((previousValue != value) 
							|| (this._CustomerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerRole.Entity = null;
						previousValue.Customer_CustomerRole_Mappings.Remove(this);
					}
					this._CustomerRole.Entity = value;
					if ((value != null))
					{
						value.Customer_CustomerRole_Mappings.Add(this);
						this._CustomerRole_Id = value.Id;
					}
					else
					{
						this._CustomerRole_Id = default(int);
					}
					this.SendPropertyChanged("CustomerRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerAddresses")]
	public partial class CustomerAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Customer_Id;
		
		private int _Address_Id;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IdChanging(int value);
    partial void OnCustomer_IdChanged();
    partial void OnAddress_IdChanging(int value);
    partial void OnAddress_IdChanged();
    #endregion
		
		public CustomerAddress()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Customer_Id
		{
			get
			{
				return this._Customer_Id;
			}
			set
			{
				if ((this._Customer_Id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IdChanging(value);
					this.SendPropertyChanging();
					this._Customer_Id = value;
					this.SendPropertyChanged("Customer_Id");
					this.OnCustomer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Address_Id
		{
			get
			{
				return this._Address_Id;
			}
			set
			{
				if ((this._Address_Id != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddress_IdChanging(value);
					this.SendPropertyChanging();
					this._Address_Id = value;
					this.SendPropertyChanged("Address_Id");
					this.OnAddress_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerAddress", Storage="_Customer", ThisKey="Customer_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerAddresses.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerAddresses.Add(this);
						this._Customer_Id = value.Id;
					}
					else
					{
						this._Customer_Id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_CustomerAddress", Storage="_Address", ThisKey="Address_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.CustomerAddresses.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.CustomerAddresses.Add(this);
						this._Address_Id = value.Id;
					}
					else
					{
						this._Address_Id = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerRole")]
	public partial class CustomerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _FreeShipping;
		
		private bool _TaxExempt;
		
		private bool _Active;
		
		private bool _IsSystemRole;
		
		private string _SystemName;
		
		private EntitySet<Customer_CustomerRole_Mapping> _Customer_CustomerRole_Mappings;
		
		private EntitySet<PermissionRecord_Role_Mapping> _PermissionRecord_Role_Mappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFreeShippingChanging(bool value);
    partial void OnFreeShippingChanged();
    partial void OnTaxExemptChanging(bool value);
    partial void OnTaxExemptChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnIsSystemRoleChanging(bool value);
    partial void OnIsSystemRoleChanged();
    partial void OnSystemNameChanging(string value);
    partial void OnSystemNameChanged();
    #endregion
		
		public CustomerRole()
		{
			this._Customer_CustomerRole_Mappings = new EntitySet<Customer_CustomerRole_Mapping>(new Action<Customer_CustomerRole_Mapping>(this.attach_Customer_CustomerRole_Mappings), new Action<Customer_CustomerRole_Mapping>(this.detach_Customer_CustomerRole_Mappings));
			this._PermissionRecord_Role_Mappings = new EntitySet<PermissionRecord_Role_Mapping>(new Action<PermissionRecord_Role_Mapping>(this.attach_PermissionRecord_Role_Mappings), new Action<PermissionRecord_Role_Mapping>(this.detach_PermissionRecord_Role_Mappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreeShipping", DbType="Bit NOT NULL")]
		public bool FreeShipping
		{
			get
			{
				return this._FreeShipping;
			}
			set
			{
				if ((this._FreeShipping != value))
				{
					this.OnFreeShippingChanging(value);
					this.SendPropertyChanging();
					this._FreeShipping = value;
					this.SendPropertyChanged("FreeShipping");
					this.OnFreeShippingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxExempt", DbType="Bit NOT NULL")]
		public bool TaxExempt
		{
			get
			{
				return this._TaxExempt;
			}
			set
			{
				if ((this._TaxExempt != value))
				{
					this.OnTaxExemptChanging(value);
					this.SendPropertyChanging();
					this._TaxExempt = value;
					this.SendPropertyChanged("TaxExempt");
					this.OnTaxExemptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemRole", DbType="Bit NOT NULL")]
		public bool IsSystemRole
		{
			get
			{
				return this._IsSystemRole;
			}
			set
			{
				if ((this._IsSystemRole != value))
				{
					this.OnIsSystemRoleChanging(value);
					this.SendPropertyChanging();
					this._IsSystemRole = value;
					this.SendPropertyChanged("IsSystemRole");
					this.OnIsSystemRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemName", DbType="NVarChar(255)")]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerRole_Customer_CustomerRole_Mapping", Storage="_Customer_CustomerRole_Mappings", ThisKey="Id", OtherKey="CustomerRole_Id")]
		public EntitySet<Customer_CustomerRole_Mapping> Customer_CustomerRole_Mappings
		{
			get
			{
				return this._Customer_CustomerRole_Mappings;
			}
			set
			{
				this._Customer_CustomerRole_Mappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerRole_PermissionRecord_Role_Mapping", Storage="_PermissionRecord_Role_Mappings", ThisKey="Id", OtherKey="CustomerRole_Id")]
		public EntitySet<PermissionRecord_Role_Mapping> PermissionRecord_Role_Mappings
		{
			get
			{
				return this._PermissionRecord_Role_Mappings;
			}
			set
			{
				this._PermissionRecord_Role_Mappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customer_CustomerRole_Mappings(Customer_CustomerRole_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.CustomerRole = this;
		}
		
		private void detach_Customer_CustomerRole_Mappings(Customer_CustomerRole_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.CustomerRole = null;
		}
		
		private void attach_PermissionRecord_Role_Mappings(PermissionRecord_Role_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.CustomerRole = this;
		}
		
		private void detach_PermissionRecord_Role_Mappings(PermissionRecord_Role_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.CustomerRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _LogLevelId;
		
		private string _ShortMessage;
		
		private string _FullMessage;
		
		private string _IpAddress;
		
		private System.Nullable<int> _CustomerId;
		
		private string _PageUrl;
		
		private string _ReferrerUrl;
		
		private System.DateTime _CreatedOnUtc;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLogLevelIdChanging(int value);
    partial void OnLogLevelIdChanged();
    partial void OnShortMessageChanging(string value);
    partial void OnShortMessageChanged();
    partial void OnFullMessageChanging(string value);
    partial void OnFullMessageChanged();
    partial void OnIpAddressChanging(string value);
    partial void OnIpAddressChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnPageUrlChanging(string value);
    partial void OnPageUrlChanged();
    partial void OnReferrerUrlChanging(string value);
    partial void OnReferrerUrlChanged();
    partial void OnCreatedOnUtcChanging(System.DateTime value);
    partial void OnCreatedOnUtcChanged();
    #endregion
		
		public Log()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogLevelId", DbType="Int NOT NULL")]
		public int LogLevelId
		{
			get
			{
				return this._LogLevelId;
			}
			set
			{
				if ((this._LogLevelId != value))
				{
					this.OnLogLevelIdChanging(value);
					this.SendPropertyChanging();
					this._LogLevelId = value;
					this.SendPropertyChanged("LogLevelId");
					this.OnLogLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortMessage", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ShortMessage
		{
			get
			{
				return this._ShortMessage;
			}
			set
			{
				if ((this._ShortMessage != value))
				{
					this.OnShortMessageChanging(value);
					this.SendPropertyChanging();
					this._ShortMessage = value;
					this.SendPropertyChanged("ShortMessage");
					this.OnShortMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullMessage", DbType="NVarChar(MAX)")]
		public string FullMessage
		{
			get
			{
				return this._FullMessage;
			}
			set
			{
				if ((this._FullMessage != value))
				{
					this.OnFullMessageChanging(value);
					this.SendPropertyChanging();
					this._FullMessage = value;
					this.SendPropertyChanged("FullMessage");
					this.OnFullMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="NVarChar(200)")]
		public string IpAddress
		{
			get
			{
				return this._IpAddress;
			}
			set
			{
				if ((this._IpAddress != value))
				{
					this.OnIpAddressChanging(value);
					this.SendPropertyChanging();
					this._IpAddress = value;
					this.SendPropertyChanged("IpAddress");
					this.OnIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageUrl", DbType="NVarChar(MAX)")]
		public string PageUrl
		{
			get
			{
				return this._PageUrl;
			}
			set
			{
				if ((this._PageUrl != value))
				{
					this.OnPageUrlChanging(value);
					this.SendPropertyChanging();
					this._PageUrl = value;
					this.SendPropertyChanged("PageUrl");
					this.OnPageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferrerUrl", DbType="NVarChar(MAX)")]
		public string ReferrerUrl
		{
			get
			{
				return this._ReferrerUrl;
			}
			set
			{
				if ((this._ReferrerUrl != value))
				{
					this.OnReferrerUrlChanging(value);
					this.SendPropertyChanging();
					this._ReferrerUrl = value;
					this.SendPropertyChanged("ReferrerUrl");
					this.OnReferrerUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOnUtc", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOnUtc
		{
			get
			{
				return this._CreatedOnUtc;
			}
			set
			{
				if ((this._CreatedOnUtc != value))
				{
					this.OnCreatedOnUtcChanging(value);
					this.SendPropertyChanging();
					this._CreatedOnUtc = value;
					this.SendPropertyChanged("CreatedOnUtc");
					this.OnCreatedOnUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Log", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionRecord")]
	public partial class PermissionRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _SystemName;
		
		private string _Category;
		
		private EntitySet<PermissionRecord_Role_Mapping> _PermissionRecord_Role_Mappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSystemNameChanging(string value);
    partial void OnSystemNameChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    #endregion
		
		public PermissionRecord()
		{
			this._PermissionRecord_Role_Mappings = new EntitySet<PermissionRecord_Role_Mapping>(new Action<PermissionRecord_Role_Mapping>(this.attach_PermissionRecord_Role_Mappings), new Action<PermissionRecord_Role_Mapping>(this.detach_PermissionRecord_Role_Mappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SystemName
		{
			get
			{
				return this._SystemName;
			}
			set
			{
				if ((this._SystemName != value))
				{
					this.OnSystemNameChanging(value);
					this.SendPropertyChanging();
					this._SystemName = value;
					this.SendPropertyChanged("SystemName");
					this.OnSystemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermissionRecord_PermissionRecord_Role_Mapping", Storage="_PermissionRecord_Role_Mappings", ThisKey="Id", OtherKey="PermissionRecord_Id")]
		public EntitySet<PermissionRecord_Role_Mapping> PermissionRecord_Role_Mappings
		{
			get
			{
				return this._PermissionRecord_Role_Mappings;
			}
			set
			{
				this._PermissionRecord_Role_Mappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionRecord_Role_Mappings(PermissionRecord_Role_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.PermissionRecord = this;
		}
		
		private void detach_PermissionRecord_Role_Mappings(PermissionRecord_Role_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.PermissionRecord = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionRecord_Role_Mapping")]
	public partial class PermissionRecord_Role_Mapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionRecord_Id;
		
		private int _CustomerRole_Id;
		
		private EntityRef<PermissionRecord> _PermissionRecord;
		
		private EntityRef<CustomerRole> _CustomerRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionRecord_IdChanging(int value);
    partial void OnPermissionRecord_IdChanged();
    partial void OnCustomerRole_IdChanging(int value);
    partial void OnCustomerRole_IdChanged();
    #endregion
		
		public PermissionRecord_Role_Mapping()
		{
			this._PermissionRecord = default(EntityRef<PermissionRecord>);
			this._CustomerRole = default(EntityRef<CustomerRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionRecord_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermissionRecord_Id
		{
			get
			{
				return this._PermissionRecord_Id;
			}
			set
			{
				if ((this._PermissionRecord_Id != value))
				{
					if (this._PermissionRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionRecord_IdChanging(value);
					this.SendPropertyChanging();
					this._PermissionRecord_Id = value;
					this.SendPropertyChanged("PermissionRecord_Id");
					this.OnPermissionRecord_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerRole_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerRole_Id
		{
			get
			{
				return this._CustomerRole_Id;
			}
			set
			{
				if ((this._CustomerRole_Id != value))
				{
					if (this._CustomerRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerRole_IdChanging(value);
					this.SendPropertyChanging();
					this._CustomerRole_Id = value;
					this.SendPropertyChanged("CustomerRole_Id");
					this.OnCustomerRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermissionRecord_PermissionRecord_Role_Mapping", Storage="_PermissionRecord", ThisKey="PermissionRecord_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PermissionRecord PermissionRecord
		{
			get
			{
				return this._PermissionRecord.Entity;
			}
			set
			{
				PermissionRecord previousValue = this._PermissionRecord.Entity;
				if (((previousValue != value) 
							|| (this._PermissionRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissionRecord.Entity = null;
						previousValue.PermissionRecord_Role_Mappings.Remove(this);
					}
					this._PermissionRecord.Entity = value;
					if ((value != null))
					{
						value.PermissionRecord_Role_Mappings.Add(this);
						this._PermissionRecord_Id = value.Id;
					}
					else
					{
						this._PermissionRecord_Id = default(int);
					}
					this.SendPropertyChanged("PermissionRecord");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerRole_PermissionRecord_Role_Mapping", Storage="_CustomerRole", ThisKey="CustomerRole_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CustomerRole CustomerRole
		{
			get
			{
				return this._CustomerRole.Entity;
			}
			set
			{
				CustomerRole previousValue = this._CustomerRole.Entity;
				if (((previousValue != value) 
							|| (this._CustomerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerRole.Entity = null;
						previousValue.PermissionRecord_Role_Mappings.Remove(this);
					}
					this._CustomerRole.Entity = value;
					if ((value != null))
					{
						value.PermissionRecord_Role_Mappings.Add(this);
						this._CustomerRole_Id = value.Id;
					}
					else
					{
						this._CustomerRole_Id = default(int);
					}
					this.SendPropertyChanged("CustomerRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Value;
		
		private int _StoreId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnStoreIdChanging(int value);
    partial void OnStoreIdChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreId", DbType="Int NOT NULL")]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this.OnStoreIdChanging(value);
					this.SendPropertyChanging();
					this._StoreId = value;
					this.SendPropertyChanged("StoreId");
					this.OnStoreIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
